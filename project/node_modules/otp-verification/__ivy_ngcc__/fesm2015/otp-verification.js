import { Injectable, Directive, HostListener, Input, Component, Output, ViewChild, EventEmitter, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["otp"];
class OtpVerificationService {
    constructor() { }
    /**
     * @param {?} key
     * @return {?}
     */
    isBackspace(key) {
        return key === 'Backspace';
    }
}
OtpVerificationService.ɵfac = function OtpVerificationService_Factory(t) { return new (t || OtpVerificationService)(); };
OtpVerificationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OtpVerificationService, factory: OtpVerificationService.ɵfac, providedIn: 'root' });
/** @nocollapse */
OtpVerificationService.ctorParameters = () => [];
/** @nocollapse */ OtpVerificationService.ngInjectableDef = defineInjectable({ factory: function OtpVerificationService_Factory() { return new OtpVerificationService(); }, token: OtpVerificationService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OtpVerificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtpVerificationComponent {
    /**
     * @param {?} otpVerificationService
     */
    constructor(otpVerificationService) {
        this.otpVerificationService = otpVerificationService;
        this.otpOut = new EventEmitter();
        this.specialKeys = [
            'CapsLock', 'ControlLeft', 'ControlRight', 'ShiftLeft', 'ShiftRight',
            'AltLeft', 'AltRight', 'Escape', 'Backquote', 'ArrowUp',
            'Space', 'ArrowDown', 'Delete', 'Insert', 'End',
            'Home', 'PageDown', 'ArrowRight', 'WakeUp'
        ];
        this.inputLimt = [];
    }
    /**
     * @param {?} event
     * @param {?} next
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    nextDigit(event, next, previous, current) {
        if (this.specialKeys.includes(event.code)) {
            return;
        }
        if (!this.otpVerificationService.isBackspace(event.key) && !this.isAlphanumeric && isNaN(event.key)) {
            current.value = '';
            return;
        }
        if (this.otpVerificationService.isBackspace(event.key)) {
            if (current.value !== '' && previous) {
                current.value = '';
                previous.focus();
            }
            else if (previous) {
                previous.value = '';
                previous.focus();
            }
            else {
                current.value = '';
            }
        }
        else if (!this.otpVerificationService.isBackspace(event.key)) {
            if (event.key.length === 1) {
                if (event.getModifierState('CapsLock')) {
                    current.value = event.key.toUpperCase();
                }
                else {
                    current.value = event.key;
                }
            }
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (next) {
                    next.focus();
                }
            }));
        }
        this.returnOtp();
    }
    /**
     * @return {?}
     */
    returnOtp() {
        /** @type {?} */
        let otp = '';
        Array.from(this.otpVal.nativeElement.children).forEach((/**
         * @param {?} child
         * @return {?}
         */
        child => {
            if (!child['value']) {
                return;
            }
            otp += child['value'];
        }));
        if (otp.length === 4) {
            this.otpOut.emit(otp);
        }
    }
}
OtpVerificationComponent.ɵfac = function OtpVerificationComponent_Factory(t) { return new (t || OtpVerificationComponent)(ɵngcc0.ɵɵdirectiveInject(OtpVerificationService)); };
OtpVerificationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OtpVerificationComponent, selectors: [["ng-otp"]], viewQuery: function OtpVerificationComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.otpVal = _t.first);
    } }, inputs: { isAlphanumeric: "isAlphanumeric" }, outputs: { otpOut: "otpOut" }, decls: 12, vars: 4, consts: [[1, "angular-otp__wrap"], ["autocomplete", "off", "novalidate", ""], [1, "angular-otp__input-div"], ["otp", ""], ["type", "text", "angularOnlyNumber", "", "autofocus", "", "name", "digit1", "placeholder", "-", "maxlength", "1", 3, "isAlphanumeric", "keydown"], ["otpDigit1", ""], ["type", "text", "angularOnlyNumber", "", "name", "digit2", "placeholder", "-", "maxlength", "1", 3, "isAlphanumeric", "keydown"], ["otpDigit2", ""], ["type", "text", "angularOnlyNumber", "", "name", "digit3", "placeholder", "-", "maxlength", "1", 3, "isAlphanumeric", "keydown"], ["otpDigit3", ""], ["type", "text", "angularOnlyNumber", "", "name", "digit4", "placeholder", "-", "maxlength", "1", 3, "isAlphanumeric", "keydown"], ["otpDigit4", ""]], template: function OtpVerificationComponent_Template(rf, ctx) { if (rf & 1) {
        const _r5 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2, 3);
        ɵngcc0.ɵɵelementStart(4, "input", 4, 5);
        ɵngcc0.ɵɵlistener("keydown", function OtpVerificationComponent_Template_input_keydown_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const _r2 = ɵngcc0.ɵɵreference(7); const _r1 = ɵngcc0.ɵɵreference(5); return ctx.nextDigit($event, _r2, 0, _r1); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "input", 6, 7);
        ɵngcc0.ɵɵlistener("keydown", function OtpVerificationComponent_Template_input_keydown_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const _r3 = ɵngcc0.ɵɵreference(9); const _r1 = ɵngcc0.ɵɵreference(5); const _r2 = ɵngcc0.ɵɵreference(7); return ctx.nextDigit($event, _r3, _r1, _r2); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 8, 9);
        ɵngcc0.ɵɵlistener("keydown", function OtpVerificationComponent_Template_input_keydown_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const _r4 = ɵngcc0.ɵɵreference(11); const _r2 = ɵngcc0.ɵɵreference(7); const _r3 = ɵngcc0.ɵɵreference(9); return ctx.nextDigit($event, _r4, _r2, _r3); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "input", 10, 11);
        ɵngcc0.ɵɵlistener("keydown", function OtpVerificationComponent_Template_input_keydown_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const _r3 = ɵngcc0.ɵɵreference(9); const _r4 = ɵngcc0.ɵɵreference(11); return ctx.nextDigit($event, 0, _r3, _r4); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("isAlphanumeric", ctx.isAlphanumeric);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAlphanumeric", ctx.isAlphanumeric);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAlphanumeric", ctx.isAlphanumeric);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAlphanumeric", ctx.isAlphanumeric);
    } }, directives: function () { return [OtpVerificationDirective]; }, styles: [".angular-otp__input-div[_ngcontent-%COMP%]{border-bottom:2px solid #d7d7d7;justify-content:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.angular-otp__input-div[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:42px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}"] });
/** @nocollapse */
OtpVerificationComponent.ctorParameters = () => [
    { type: OtpVerificationService }
];
OtpVerificationComponent.propDecorators = {
    isAlphanumeric: [{ type: Input }],
    otpOut: [{ type: Output }],
    otpVal: [{ type: ViewChild, args: ['otp',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OtpVerificationComponent, [{
        type: Component,
        args: [{
                selector: 'ng-otp',
                template: "<div class=\"angular-otp__wrap\">\n  <form autocomplete=\"off\" novalidate>\n    <div class=\"angular-otp__input-div\" #otp>\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit1 autofocus\n        (keydown)=\"nextDigit($event, otpDigit2, 0, otpDigit1)\" name=\"digit1\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit2\n        (keydown)=\"nextDigit($event, otpDigit3, otpDigit1, otpDigit2)\" name=\"digit2\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit3\n        (keydown)=\"nextDigit($event, otpDigit4, otpDigit2, otpDigit3)\" name=\"digit3\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit4\n        (keydown)=\"nextDigit($event, 0, otpDigit3, otpDigit4)\" name=\"digit4\" placeholder=\"-\" maxlength=\"1\">\n    </div>\n  </form>\n</div>",
                styles: [".angular-otp__input-div{border-bottom:2px solid #d7d7d7;justify-content:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.angular-otp__input-div input{width:42px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}"]
            }]
    }], function () { return [{ type: OtpVerificationService }]; }, { otpOut: [{
            type: Output
        }], isAlphanumeric: [{
            type: Input
        }], otpVal: [{
            type: ViewChild,
            args: ['otp']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtpVerificationDirective {
    constructor() {
        this.isAlphanumeric = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (!this.isAlphanumeric && (e.shiftKey || !(/Digit[0-9]/.test(e.code) || /Numpad[0-9]/.test(e.code)))) {
            e.preventDefault();
        }
        if (this.isAlphanumeric && !/Key[A-Z]/.test(e.code)) {
            e.preventDefault();
        }
    }
}
OtpVerificationDirective.ɵfac = function OtpVerificationDirective_Factory(t) { return new (t || OtpVerificationDirective)(); };
OtpVerificationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OtpVerificationDirective, selectors: [["", "angularOnlyNumber", ""]], hostBindings: function OtpVerificationDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function OtpVerificationDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { isAlphanumeric: "isAlphanumeric" } });
OtpVerificationDirective.propDecorators = {
    isAlphanumeric: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OtpVerificationDirective, [{
        type: Directive,
        args: [{
                selector: '[angularOnlyNumber]'
            }]
    }], function () { return []; }, { isAlphanumeric: [{
            type: Input
        }], 
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtpVerificationModule {
}
OtpVerificationModule.ɵfac = function OtpVerificationModule_Factory(t) { return new (t || OtpVerificationModule)(); };
OtpVerificationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OtpVerificationModule });
OtpVerificationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OtpVerificationModule, { declarations: [OtpVerificationComponent, OtpVerificationDirective], exports: [OtpVerificationComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OtpVerificationModule, [{
        type: NgModule,
        args: [{
                declarations: [OtpVerificationComponent, OtpVerificationDirective],
                imports: [],
                providers: [],
                exports: [OtpVerificationComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { OtpVerificationService, OtpVerificationComponent, OtpVerificationModule, OtpVerificationDirective as ɵa };

//# sourceMappingURL=otp-verification.js.map