import { Subject, Subscription } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
import { Injectable, NgModule, Component, Input, Output, EventEmitter, defineInjectable } from '@angular/core';
import { FormBuilder, Validators, FormControl, ReactiveFormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

function NgOtpComponent_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 2);
    ɵngcc0.ɵɵlistener("keyup", function NgOtpComponent_input_1_Template_input_keyup_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const i_r2 = ctx.index; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.changeFocus$.next(i_r2); })("keydown", function NgOtpComponent_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onKeyDown($event); })("focusin", function NgOtpComponent_input_1_Template_input_focusin_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const i_r2 = ctx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onFocus(i_r2); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("id", "otp-", i_r2, "");
    ɵngcc0.ɵɵpropertyInterpolate1("formControlName", "otp-", i_r2, "");
    ɵngcc0.ɵɵproperty("type", ctx_r0.typeOfInput);
    ɵngcc0.ɵɵattribute("inputmode", ctx_r0.keyboardType);
} }
class NgOtpService {
    constructor() { }
    /**
     * @param {?} string
     * @return {?}
     */
    isEmptySting(string) {
        return string === '';
    }
    /**
     * @param {?} index
     * @param {?} limit
     * @return {?}
     */
    isLastInput(index, limit) {
        return index === limit;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getElement(index) {
        return document.querySelector(`#otp-${index}`);
    }
}
NgOtpService.ɵfac = function NgOtpService_Factory(t) { return new (t || NgOtpService)(); };
NgOtpService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgOtpService, factory: NgOtpService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgOtpService.ctorParameters = () => [];
/** @nocollapse */ NgOtpService.ngInjectableDef = defineInjectable({ factory: function NgOtpService_Factory() { return new NgOtpService(); }, token: NgOtpService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgOtpComponent {
    /**
     * @param {?} formBuilder
     * @param {?} ngOtpService
     */
    constructor(formBuilder, ngOtpService) {
        this.formBuilder = formBuilder;
        this.ngOtpService = ngOtpService;
        this._allowedCharacters = /./;
        this._typeOfInput = 'text';
        this.keyboardType = 'text';
        this.otpOut = new EventEmitter();
        this.limitArray = [];
        this.isKeyAcceptable = true;
        this.changeFocus$ = new Subject();
        this.subscription = new Subscription();
        this.subscription.add(this.changeFocus$
            .pipe(throttleTime(50)).subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => { this.changeFocus(index); })));
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set allowedCharacters(el) {
        if (el) {
            this._allowedCharacters = el;
        }
        else {
            this.throwErrorForUndefinedElement(el);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set typeOfInput(type) {
        if (type) {
            this._typeOfInput = type;
            this.keyboardType = type === 'password' ? 'numeric' : 'text';
        }
        else {
            this.throwErrorForUndefinedElement(type);
        }
    }
    /**
     * @return {?}
     */
    get typeOfInput() {
        return this._typeOfInput;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.limit = this.limit ? this.limit : 4;
        this.setFormBuilder();
    }
    /**
     * @return {?}
     */
    setFormBuilder() {
        this.otpForm = this.formBuilder.group({});
        this.limitArray = Array.from(Array(this.limit).keys());
        this.limitArray.map((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            this.otpForm.addControl(`otp-${element}`, new FormControl('', Validators.required));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    changeFocus(id) {
        console.log(this.isKeyAcceptable);
        if (!this.isKeyAcceptable) {
            this.isKeyAcceptable = true;
            return;
        }
        /** @type {?} */
        const currentElement = this.ngOtpService.getElement(id);
        if (id && this.ngOtpService.isEmptySting(currentElement.value)) {
            this.moveBackward(id);
        }
        else if (this.ngOtpService.isLastInput(id, this.limit - 1)) {
            currentElement.select();
            this.otpOut.emit(Object.values(this.otpForm.value).join(''));
        }
        else if (!this.ngOtpService.isEmptySting(currentElement.value)) {
            this.moveForward(id);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    moveForward(id) {
        /** @type {?} */
        const nextElement = this.ngOtpService.getElement(id + 1);
        nextElement.focus();
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    moveBackward(id) {
        /** @type {?} */
        const nextElement = this.ngOtpService.getElement(id - 1);
        nextElement.focus();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    onFocus(id) {
        /** @type {?} */
        const currentElement = this.ngOtpService.getElement(id);
        currentElement.select();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (event.key && (event.key !== 'Backspace' && event.key !== 'Delete')) {
            if (this._allowedCharacters) {
                if (this._allowedCharacters instanceof RegExp) {
                    if (!this._allowedCharacters.test(event.key)) {
                        this.isKeyAcceptable = false;
                        event.preventDefault();
                    }
                }
                else {
                    if (!this._allowedCharacters.includes(event.key)) {
                        this.isKeyAcceptable = false;
                        event.preventDefault();
                    }
                }
            }
        }
    }
    /**
     * @private
     * @template T
     * @param {?} element
     * @return {?}
     */
    throwErrorForUndefinedElement(element) {
        throw new Error(`Is not possibile set ${element} to this parameter`);
    }
}
NgOtpComponent.ɵfac = function NgOtpComponent_Factory(t) { return new (t || NgOtpComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(NgOtpService)); };
NgOtpComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgOtpComponent, selectors: [["ng-otp"]], inputs: { allowedCharacters: "allowedCharacters", typeOfInput: "typeOfInput", limit: "limit" }, outputs: { otpOut: "otpOut" }, decls: 2, vars: 2, consts: [[1, "otp-wrap", 3, "formGroup"], ["class", "otp-input", "maxlength", "1", "placeholder", "-", 3, "type", "id", "formControlName", "keyup", "keydown", "focusin", 4, "ngFor", "ngForOf"], ["maxlength", "1", "placeholder", "-", 1, "otp-input", 3, "type", "id", "formControlName", "keyup", "keydown", "focusin"]], template: function NgOtpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, NgOtpComponent_input_1_Template, 1, 4, "input", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.otpForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.limitArray);
    } }, directives: [ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc2.NgForOf, ɵngcc1.DefaultValueAccessor, ɵngcc1.MaxLengthValidator, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName], styles: [".otp-input[_ngcontent-%COMP%]{width:50px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}.otp-input[_ngcontent-%COMP%]::-moz-selection{background:#f0f9ff}.otp-input[_ngcontent-%COMP%]::selection{background:#f0f9ff}.otp-wrap[_ngcontent-%COMP%]{border-bottom:2px solid #d7d7d7;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}"] });
/** @nocollapse */
NgOtpComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: NgOtpService }
];
NgOtpComponent.propDecorators = {
    limit: [{ type: Input }],
    allowedCharacters: [{ type: Input }],
    typeOfInput: [{ type: Input }],
    otpOut: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpComponent, [{
        type: Component,
        args: [{
                selector: 'ng-otp',
                template: "<div\n  [formGroup]=\"otpForm\"\n  class=\"otp-wrap\"\n>\n  <input\n    [type]=\"typeOfInput\"\n    class=\"otp-input\"\n    maxlength=\"1\"\n    id=\"otp-{{i}}\"\n    *ngFor=\"let control of limitArray; let i = index\"\n    placeholder=\"-\"\n    (keyup)=\"changeFocus$.next(i)\"\n    (keydown)=\"onKeyDown($event)\"\n    (focusin)=\"onFocus(i)\"\n    formControlName=\"otp-{{i}}\"\n    [attr.inputmode]=\"keyboardType\"\n  >\n</div>",
                styles: [".otp-input{width:50px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}.otp-input::-moz-selection{background:#f0f9ff}.otp-input::selection{background:#f0f9ff}.otp-wrap{border-bottom:2px solid #d7d7d7;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: NgOtpService }]; }, { otpOut: [{
            type: Output
        }], allowedCharacters: [{
            type: Input
        }], typeOfInput: [{
            type: Input
        }], limit: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgOtpModule {
}
NgOtpModule.ɵfac = function NgOtpModule_Factory(t) { return new (t || NgOtpModule)(); };
NgOtpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOtpModule });
NgOtpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            BrowserModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpModule, { declarations: function () { return [NgOtpComponent]; }, imports: function () { return [BrowserModule,
        ReactiveFormsModule]; }, exports: function () { return [NgOtpComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpModule, [{
        type: NgModule,
        args: [{
                declarations: [NgOtpComponent],
                imports: [
                    BrowserModule,
                    ReactiveFormsModule
                ],
                exports: [NgOtpComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgOtpService, NgOtpComponent, NgOtpModule };

//# sourceMappingURL=ng-otp.js.map