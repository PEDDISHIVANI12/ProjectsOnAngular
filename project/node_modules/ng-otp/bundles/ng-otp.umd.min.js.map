{"version":3,"sources":["ng://ng-otp/lib/ng-otp.service.ts","ng://ng-otp/lib/ng-otp.component.ts","ng://ng-otp/lib/ng-otp.module.ts"],"names":["NgOtpService","prototype","isEmptySting","string","isLastInput","index","limit","getElement","document","querySelector","Injectable","args","providedIn","NgOtpComponent","Object","defineProperty","el","this","_allowedCharacters","throwErrorForUndefinedElement","_typeOfInput","type","keyboardType","ngOnInit","setFormBuilder","_this","otpForm","formBuilder","group","limitArray","Array","from","keys","map","element","addControl","FormControl","Validators","required","changeFocus","id","console","log","isKeyAcceptable","currentElement","ngOtpService","value","moveBackward","select","otpOut","emit","values","join","moveForward","focus","onFocus","ngOnDestroy","subscription","unsubscribe","onKeyDown","event","key","RegExp","test","preventDefault","includes","Error","Component","selector","template","FormBuilder","Input","Output","EventEmitter","changeFocus$","Subject","Subscription","add","pipe","throttleTime","subscribe","NgOtpModule","NgModule","declarations","imports","BrowserModule","ReactiveFormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgOtpService {\n\n  constructor() { }\n\n  isEmptySting(string: string) {\n    return string === '';\n  }\n\n  isLastInput(index, limit) {\n    return index === limit;\n  }\n\n  getElement(index) {\n    return document.querySelector<HTMLInputElement>(`#otp-${index}`);\n  }\n}\n","import { Component, Input, OnDestroy, Output, EventEmitter, OnInit, OnChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { NgOtpService } from './ng-otp.service';\nimport { Subject, Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'ng-otp',\n  templateUrl: './ng-otp.component.html',\n  styleUrls: ['./ng-otp.component.scss']\n})\nexport class NgOtpComponent implements OnInit, OnDestroy {\n\n  private _allowedCharacters: string | RegExp = /./;\n  private _typeOfInput: 'text' | 'number' | 'password' = 'text';\n  keyboardType: 'numeric' | 'text' = 'text';\n\n  @Input() limit: number;\n  @Input() set allowedCharacters(el: string | RegExp) {\n    if (el) {\n      this._allowedCharacters = el;\n    } else {\n      this.throwErrorForUndefinedElement(el);\n    }\n  }\n\n  @Input() set typeOfInput(type: 'text' | 'number' | 'password') {\n    if (type) {\n      this._typeOfInput = type;\n      this.keyboardType = type === 'password' ? 'numeric' : 'text';\n    } else {\n      this.throwErrorForUndefinedElement(type);\n    }\n  }\n\n  get typeOfInput(): 'text' | 'number' | 'password' {\n    return this._typeOfInput;\n  }\n\n  @Output() otpOut = new EventEmitter();\n\n  otpForm: FormGroup;\n  public limitArray = [];\n  private isKeyAcceptable = true;\n  changeFocus$ = new Subject();\n  private subscription = new Subscription();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private ngOtpService: NgOtpService\n  ) {\n    this.subscription.add(this.changeFocus$\n      .pipe(\n        throttleTime(50)\n      ).subscribe(\n        (index: number) => { this.changeFocus(index); }\n      )\n    );\n  }\n\n  ngOnInit() {\n    this.limit = this.limit ? this.limit : 4;\n    this.setFormBuilder();\n  }\n\n  setFormBuilder() {\n    this.otpForm = this.formBuilder.group({});\n    this.limitArray = Array.from(Array(this.limit).keys());\n    this.limitArray.map((element) => {\n      this.otpForm.addControl(`otp-${element}`, new FormControl('', Validators.required));\n    });\n  }\n\n  changeFocus(id: number) {\n    console.log(this.isKeyAcceptable);\n    if (!this.isKeyAcceptable) {\n      this.isKeyAcceptable = true;\n      return;\n    }\n    const currentElement: HTMLInputElement = this.ngOtpService.getElement(id);\n    if (id && this.ngOtpService.isEmptySting(currentElement.value)) {\n      this.moveBackward(id);\n    } else if (this.ngOtpService.isLastInput(id, this.limit - 1)) {\n      currentElement.select();\n      this.otpOut.emit(Object.values(this.otpForm.value).join(''));\n    } else if (!this.ngOtpService.isEmptySting(currentElement.value)) {\n      this.moveForward(id);\n    }\n  }\n\n  private moveForward(id: number) {\n    const nextElement: HTMLInputElement = this.ngOtpService.getElement(id + 1);\n    nextElement.focus();\n  }\n\n  private moveBackward(id: number) {\n    const nextElement: HTMLInputElement = this.ngOtpService.getElement(id - 1);\n    nextElement.focus();\n  }\n\n  onFocus(id) {\n    const currentElement: HTMLInputElement = this.ngOtpService.getElement(id);\n    currentElement.select();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  onKeyDown(event: KeyboardEvent) {\n    if (event.key && (event.key !== 'Backspace' && event.key !== 'Delete')) {\n      if (this._allowedCharacters) {\n        if (this._allowedCharacters instanceof RegExp) {\n          if (!this._allowedCharacters.test(event.key)) {\n            this.isKeyAcceptable = false;\n            event.preventDefault();\n          }\n        } else {\n          if (!this._allowedCharacters.includes(event.key)) {\n            this.isKeyAcceptable = false;\n            event.preventDefault();\n          }\n        }\n      }\n    }\n  }\n\n  private throwErrorForUndefinedElement<T>(element: T) {\n    throw new Error(`Is not possibile set ${element} to this parameter`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgOtpComponent } from './ng-otp.component';\n\nimport {ReactiveFormsModule} from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [NgOtpComponent],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule\n  ],\n  exports: [NgOtpComponent]\n})\nexport class NgOtpModule { }\n"]}