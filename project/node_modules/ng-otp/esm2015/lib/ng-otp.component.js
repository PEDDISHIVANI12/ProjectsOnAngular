/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormBuilder, Validators, FormControl } from '@angular/forms';
import { NgOtpService } from './ng-otp.service';
import { Subject, Subscription } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
export class NgOtpComponent {
    /**
     * @param {?} formBuilder
     * @param {?} ngOtpService
     */
    constructor(formBuilder, ngOtpService) {
        this.formBuilder = formBuilder;
        this.ngOtpService = ngOtpService;
        this._allowedCharacters = /./;
        this._typeOfInput = 'text';
        this.keyboardType = 'text';
        this.otpOut = new EventEmitter();
        this.limitArray = [];
        this.isKeyAcceptable = true;
        this.changeFocus$ = new Subject();
        this.subscription = new Subscription();
        this.subscription.add(this.changeFocus$
            .pipe(throttleTime(50)).subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => { this.changeFocus(index); })));
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set allowedCharacters(el) {
        if (el) {
            this._allowedCharacters = el;
        }
        else {
            this.throwErrorForUndefinedElement(el);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set typeOfInput(type) {
        if (type) {
            this._typeOfInput = type;
            this.keyboardType = type === 'password' ? 'numeric' : 'text';
        }
        else {
            this.throwErrorForUndefinedElement(type);
        }
    }
    /**
     * @return {?}
     */
    get typeOfInput() {
        return this._typeOfInput;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.limit = this.limit ? this.limit : 4;
        this.setFormBuilder();
    }
    /**
     * @return {?}
     */
    setFormBuilder() {
        this.otpForm = this.formBuilder.group({});
        this.limitArray = Array.from(Array(this.limit).keys());
        this.limitArray.map((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            this.otpForm.addControl(`otp-${element}`, new FormControl('', Validators.required));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    changeFocus(id) {
        console.log(this.isKeyAcceptable);
        if (!this.isKeyAcceptable) {
            this.isKeyAcceptable = true;
            return;
        }
        /** @type {?} */
        const currentElement = this.ngOtpService.getElement(id);
        if (id && this.ngOtpService.isEmptySting(currentElement.value)) {
            this.moveBackward(id);
        }
        else if (this.ngOtpService.isLastInput(id, this.limit - 1)) {
            currentElement.select();
            this.otpOut.emit(Object.values(this.otpForm.value).join(''));
        }
        else if (!this.ngOtpService.isEmptySting(currentElement.value)) {
            this.moveForward(id);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    moveForward(id) {
        /** @type {?} */
        const nextElement = this.ngOtpService.getElement(id + 1);
        nextElement.focus();
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    moveBackward(id) {
        /** @type {?} */
        const nextElement = this.ngOtpService.getElement(id - 1);
        nextElement.focus();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    onFocus(id) {
        /** @type {?} */
        const currentElement = this.ngOtpService.getElement(id);
        currentElement.select();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (event.key && (event.key !== 'Backspace' && event.key !== 'Delete')) {
            if (this._allowedCharacters) {
                if (this._allowedCharacters instanceof RegExp) {
                    if (!this._allowedCharacters.test(event.key)) {
                        this.isKeyAcceptable = false;
                        event.preventDefault();
                    }
                }
                else {
                    if (!this._allowedCharacters.includes(event.key)) {
                        this.isKeyAcceptable = false;
                        event.preventDefault();
                    }
                }
            }
        }
    }
    /**
     * @private
     * @template T
     * @param {?} element
     * @return {?}
     */
    throwErrorForUndefinedElement(element) {
        throw new Error(`Is not possibile set ${element} to this parameter`);
    }
}
NgOtpComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-otp',
                template: "<div\n  [formGroup]=\"otpForm\"\n  class=\"otp-wrap\"\n>\n  <input\n    [type]=\"typeOfInput\"\n    class=\"otp-input\"\n    maxlength=\"1\"\n    id=\"otp-{{i}}\"\n    *ngFor=\"let control of limitArray; let i = index\"\n    placeholder=\"-\"\n    (keyup)=\"changeFocus$.next(i)\"\n    (keydown)=\"onKeyDown($event)\"\n    (focusin)=\"onFocus(i)\"\n    formControlName=\"otp-{{i}}\"\n    [attr.inputmode]=\"keyboardType\"\n  >\n</div>",
                styles: [".otp-input{width:50px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}.otp-input::-moz-selection{background:#f0f9ff}.otp-input::selection{background:#f0f9ff}.otp-wrap{border-bottom:2px solid #d7d7d7;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}"]
            }] }
];
/** @nocollapse */
NgOtpComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: NgOtpService }
];
NgOtpComponent.propDecorators = {
    limit: [{ type: Input }],
    allowedCharacters: [{ type: Input }],
    typeOfInput: [{ type: Input }],
    otpOut: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype._allowedCharacters;
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype._typeOfInput;
    /** @type {?} */
    NgOtpComponent.prototype.keyboardType;
    /** @type {?} */
    NgOtpComponent.prototype.limit;
    /** @type {?} */
    NgOtpComponent.prototype.otpOut;
    /** @type {?} */
    NgOtpComponent.prototype.otpForm;
    /** @type {?} */
    NgOtpComponent.prototype.limitArray;
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype.isKeyAcceptable;
    /** @type {?} */
    NgOtpComponent.prototype.changeFocus$;
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    NgOtpComponent.prototype.ngOtpService;
}
//# sourceMappingURL=data:application/json;base64,